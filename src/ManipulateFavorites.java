/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import static com.sun.xml.internal.ws.spi.db.BindingContextFactory.LOGGER;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.stream.Collectors;
import javax.persistence.Query;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import model.FavoriteList;
import model.Movie;

/**
 *
 * @author Iliana
 */
public class ManipulateFavorites extends javax.swing.JFrame {

    /**
     * Creates new form ManipulateFavorites
     */
    public ManipulateFavorites() {
        initComponents();
        
        // Initial load of favorites lists
        //moviesDBConn.getTransaction().begin();
        java.util.Collection data = qGetFavLists.getResultList();
        data.forEach((entity) -> {
            moviesDBConn.refresh(entity);
        });
        lstFavList.clear();
        lstFavList.addAll(data);
        
        // Empty the movies list in order to fill it when
        // the user clicks a favorite list
        moviesList.clear();
        
        // Center tables headers and row contents
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        favListsTable.getTableHeader().setDefaultRenderer(centerRenderer);
        favListsTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        moviesTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        moviesTable.getTableHeader().setDefaultRenderer(centerRenderer); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        moviesDBConn = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("myMoviesPU").createEntityManager();
        qGetFavLists = java.beans.Beans.isDesignTime() ? null : moviesDBConn.createQuery("SELECT f FROM FavoriteList f");
        lstFavList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(qGetFavLists.getResultList());
        moviesQuery = java.beans.Beans.isDesignTime() ? null : moviesDBConn.createQuery("SELECT m FROM Movie m");
        moviesList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(moviesQuery.getResultList());
        panelHeader = new javax.swing.JPanel();
        headerJLaber = new javax.swing.JLabel();
        panelMain = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        favListsTableScrollPane = new javax.swing.JScrollPane();
        favListsTable = new javax.swing.JTable();
        moviesTableScrollPane = new javax.swing.JScrollPane();
        moviesTable = new javax.swing.JTable();
        panelBottom = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        panelInfo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Διαχείριση Λιστών Αγαπημένων Ταινιών");
        setMinimumSize(new java.awt.Dimension(470, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        panelHeader.setBackground(new java.awt.Color(204, 255, 255));
        panelHeader.setPreferredSize(new java.awt.Dimension(470, 50));

        headerJLaber.setBackground(new java.awt.Color(44, 196, 158));
        headerJLaber.setDisplayedMnemonic('\u03c3');
        headerJLaber.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        headerJLaber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerJLaber.setText("<html><span style=\"font-size:20px;\">Διαχείριση Λιστών Αγαπημένων Ταινιών</span></html>");
        headerJLaber.setToolTipText("Διαχείρiση Λιστών Αγαπημένων Ταινιών");
        headerJLaber.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        headerJLaber.setPreferredSize(new java.awt.Dimension(470, 25));

        javax.swing.GroupLayout panelHeaderLayout = new javax.swing.GroupLayout(panelHeader);
        panelHeader.setLayout(panelHeaderLayout);
        panelHeaderLayout.setHorizontalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerJLaber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelHeaderLayout.setVerticalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerJLaber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMain.setPreferredSize(new java.awt.Dimension(470, 206));

        btnCreate.setText("Δημιουργία");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnChange.setText("Επεξεργασία");
        btnChange.setEnabled(false);
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        btnDelete.setText("Διαγραφή");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lstFavList, favListsTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Name");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        favListsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                favListsTableMouseClicked(evt);
            }
        });
        favListsTableScrollPane.setViewportView(favListsTable);

        moviesTable.getTableHeader().setReorderingAllowed(false);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, moviesList, moviesTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${overview}"));
        columnBinding.setColumnName("Overview");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rating}"));
        columnBinding.setColumnName("Rating");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${releaseDate}"));
        columnBinding.setColumnName("Release Date");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${title}"));
        columnBinding.setColumnName("Title");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        moviesTableScrollPane.setViewportView(moviesTable);

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(favListsTableScrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(moviesTableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnChange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete))
                    .addComponent(favListsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moviesTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        panelBottom.setMinimumSize(new java.awt.Dimension(100, 50));
        panelBottom.setPreferredSize(new java.awt.Dimension(790, 50));

        exitButton.setBackground(new java.awt.Color(204, 255, 255));
        exitButton.setText("<html><span style=\"font-size:18px;\">Επιστροφή</span></html>");
        exitButton.setToolTipText("Συντόμευση πλήκτρου: Esc");
        exitButton.setPreferredSize(new java.awt.Dimension(470, 33));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBottomLayout = new javax.swing.GroupLayout(panelBottom);
        panelBottom.setLayout(panelBottomLayout);
        panelBottomLayout.setHorizontalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE))
        );
        panelBottomLayout.setVerticalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
        );

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Πληροφορίες", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18), new java.awt.Color(0, 51, 255))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("<html> <p>Με τη λειτουργία αυτή παρέχεται η δυνατότητα προβολής και διαχείρισης των λιστών αγαπημένων ταινιών. </li> <li> Με το πλήκτρο <span style=\"color:blue;\"><b>Δημιουργία </span>, καταχωρείται νέα λίστα αγαπημένων </li> <li> Με το πλήκτρο <span style=\"color:blue;\"><b>Επεξεργασία</span>, δίνεται η δυνατότητα μετονομασίας μιας λίστας </li> <li> Με το πλήκτρο <span style=\"color:blue;\"><b>Διαγραφή </span>, διαγράφεται μία ή και περισσότερες λίστες");
        jLabel2.setToolTipText("");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap())
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 1570, Short.MAX_VALUE)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1570, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, 1560, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        moviesDBConn.getTransaction().rollback();
        moviesDBConn.close();
    }//GEN-LAST:event_formInternalFrameClosed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog (null, "Θέλετε να κλείσετε τη λειτουργία  'Διαχείριση Λιστών Αγαπημένων Ταινιών' ?","ΠΡΟΣΟΧΗ !!!",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void favListsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favListsTableMouseClicked

        try {
            // Enable changes button only if one row is selected.
            btnChange.setEnabled(favListsTable.getSelectedRows().length == 1);

            // Enable deletions button when at least on row is selected.
            btnDelete.setEnabled(favListsTable.getSelectedRows().length >= 1);

            // Load movies.
            Query qGetMoviesOfList = moviesDBConn.createNamedQuery("Movie.findByFavListId");
            qGetMoviesOfList.setParameter("favlistid", Integer.parseInt(favListsTable.getModel().getValueAt(favListsTable.getSelectedRows()[0], 0).toString()));
            java.util.Collection data = qGetMoviesOfList.getResultList();
            data.forEach((entity) -> {
                moviesDBConn.refresh(entity);
            });
            moviesList.clear();
            moviesList.addAll(data);
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Exception occur" + ex.getMessage());
            LOGGER.log(Level.SEVERE, "Exception occur", ex);
        }
    }//GEN-LAST:event_favListsTableMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog (null, "Θέλετε να διαγραφούν οι επιλεγμένες λίστες?","ΠΡΟΣΟΧΗ !!!",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.NO_OPTION){
                return;
            }
            moviesDBConn.getTransaction().begin();
            // Delete selected lists
            int[] selected = favListsTable.getSelectedRows();
            List<FavoriteList> toRemove = new ArrayList<FavoriteList>(selected.length);
            for (int idx = 0; idx < selected.length; idx++) {
                FavoriteList f = lstFavList.get(favListsTable.convertRowIndexToModel(selected[idx]));
                toRemove.add(f);
                moviesDBConn.remove(f);

                // Disconnect movies that referencing the deleted list
                List<Movie> moviesToUpdate = moviesList.stream()
                .filter(m -> m.getFavoriteListId().getId()==f.getId())
                .collect(Collectors.toList());
                if(moviesToUpdate.size() > 0){

                    moviesToUpdate.stream().map((movie) -> {
                        movie.setFavoriteListId(null);
                        return movie;
                    }).forEachOrdered((movie) -> {
                        moviesDBConn.persist(movie);
                    });
                }
            }
            moviesList.clear();
            lstFavList.removeAll(toRemove);
            moviesDBConn.getTransaction().commit();
        }
        catch(Exception ex){
            moviesDBConn.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Exception occur" + ex.getMessage());
            LOGGER.log(Level.SEVERE, "Exception occur", ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        try {
            // Ask for the new name
            String listName = favListsTable.getModel().getValueAt(favListsTable.getSelectedRows()[0], 1).toString();
            int listId = Integer.parseInt(favListsTable.getModel().getValueAt(favListsTable.getSelectedRows()[0], 0).toString());
            TitleMessageBox msgBox = new TitleMessageBox("Επεξεργασία νέας λίστας", listName);

            msgBox.setModal(true);
            msgBox.setVisible(true);
            listName = msgBox.getPreDefMessage();

            // Get a reference to selected favorite list
            FavoriteList favList = lstFavList.stream()
            .filter(fl -> fl.getId() == listId)
            .findFirst()
            .orElse(null);
            if(favList != null) {
                moviesDBConn.getTransaction().begin();

                moviesDBConn.persist(favList);
                favList.setName(listName);

                moviesDBConn.getTransaction().commit();
            }
        }
        catch(Exception ex){
            moviesDBConn.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Exception occur" + ex.getMessage());
            LOGGER.log(Level.SEVERE, "Exception occur", ex);
        }
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            TitleMessageBox msgBox = new TitleMessageBox("Δημιουργία νέας λίστας", "");

            msgBox.setModal(true);
            msgBox.setVisible(true);

            if(msgBox.getPreDefMessage().trim().equals("") &&
                msgBox.getUserButtonSelection()==TitleMessageBox.ButtonPressed.AcceptButtonPressed){
                JOptionPane.showMessageDialog(null, "Δεν μπορείτε να αποθηκεύσετε λίστα αγαπημένων με κενό όνομα.");
                return;
            }
            else
            if(msgBox.getUserButtonSelection()==TitleMessageBox.ButtonPressed.CancelButtonPressed)
            return;

            FavoriteList favList = new FavoriteList(msgBox.getPreDefMessage().trim());
            moviesDBConn.getTransaction().begin();

            moviesDBConn.persist(favList);
            lstFavList.add(favList);
            int row = lstFavList.size() - 1;
            favListsTable.setRowSelectionInterval(row, row);
            favListsTable.scrollRectToVisible(favListsTable.getCellRect(row, 0, true));

            moviesDBConn.getTransaction().commit();
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Exception occur" + ex.getMessage());
            LOGGER.log(Level.SEVERE, "Exception occur", ex);
        }
    }//GEN-LAST:event_btnCreateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton exitButton;
    private javax.swing.JTable favListsTable;
    private javax.swing.JScrollPane favListsTableScrollPane;
    private javax.swing.JLabel headerJLaber;
    private javax.swing.JLabel jLabel2;
    private java.util.List<model.FavoriteList> lstFavList;
    private javax.persistence.EntityManager moviesDBConn;
    private java.util.List<model.Movie> moviesList;
    private javax.persistence.Query moviesQuery;
    private javax.swing.JTable moviesTable;
    private javax.swing.JScrollPane moviesTableScrollPane;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelMain;
    private javax.persistence.Query qGetFavLists;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
