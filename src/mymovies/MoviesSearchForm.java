
package mymovies;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import model.Movie;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.FavoriteList;



/**
 *
 * @author Periklis Bouzanis
 */
public class MoviesSearchForm extends javax.swing.JFrame {

    /**
     * Creates new form moviesSearchGUI
     * @param parent;
     */
    
    public MoviesSearchForm(MainMenu parent) {
        this.parent = parent;
        
        initComponents();
        this.movieSearchButton.setEnabled(false);
        


    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        em = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("myMoviesPU").createEntityManager();
        favoriteListQuery = java.beans.Beans.isDesignTime() ? null : em.createQuery("SELECT f.name FROM FavoriteList f");
        favoriteListList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : favoriteListQuery.getResultList();
        movieTypeLabel = new javax.swing.JLabel();
        movieTypeComboBox = new javax.swing.JComboBox<>();
        movieSearchButton = new javax.swing.JButton();
        resetChoicesButton = new javax.swing.JButton();
        yearMovieLabel = new javax.swing.JLabel();
        yearMovieFieldEditor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        movieResultTable = new javax.swing.JTable();
        favoriteListComboBox = new javax.swing.JComboBox<>();
        addToListLabel = new javax.swing.JLabel();
        removeFromListButton = new javax.swing.JButton();
        headerJPanel = new javax.swing.JPanel();
        headerJLaber = new javax.swing.JLabel();
        searchTableLabel = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        selectedMovieInfo = new javax.swing.JLabel();
        buttonAddToFavList = new javax.swing.JButton();

        setTitle("Αναζήτηση Ταινιών");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${defaultCloseOperation}"), this, org.jdesktop.beansbinding.BeanProperty.create("defaultCloseOperation"));
        bindingGroup.addBinding(binding);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        movieTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        movieTypeLabel.setText("Επιλογή Είδους Ταινίας");

        movieTypeComboBox.setFont(new java.awt.Font("Arial Black", 2, 12)); // NOI18N
        movieTypeComboBox.setMaximumRowCount(4);
        movieTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Κανένα>", "Action", "Romance", "Science Fiction" }));
        movieTypeComboBox.setToolTipText("Πρέπει να επιλέξετε είδος ταινίας και έτος κυκλοφορίας");
        movieTypeComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        movieTypeComboBox.setFocusCycleRoot(true);
        movieTypeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieTypeComboBoxMouseClicked(evt);
            }
        });
        movieTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieTypeComboBoxActionPerformed(evt);
            }
        });
        movieTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                movieTypeComboBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                movieTypeComboBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                movieTypeComboBoxKeyTyped(evt);
            }
        });

        movieSearchButton.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        movieSearchButton.setText("Αναζήτηση");
        movieSearchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        movieSearchButton.setDoubleBuffered(true);
        movieSearchButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                movieSearchButtonFocusLost(evt);
            }
        });
        movieSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieSearchButtonActionPerformed(evt);
            }
        });

        resetChoicesButton.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        resetChoicesButton.setText("Καθαρισμός Επιλογών");
        resetChoicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetChoicesButtonActionPerformed(evt);
            }
        });

        yearMovieLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        yearMovieLabel.setText("Έτος Κυκολοφορίας");

        yearMovieFieldEditor.setColumns(4);
        yearMovieFieldEditor.setFont(new java.awt.Font("Arial Black", 2, 12)); // NOI18N
        yearMovieFieldEditor.setForeground(new java.awt.Color(153, 153, 153));
        yearMovieFieldEditor.setToolTipText("Πρέπει να συμπληρώσετε έτος κυκλοφορίας της ταινίας");
        yearMovieFieldEditor.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        yearMovieFieldEditor.setHighlighter(null);
        yearMovieFieldEditor.setInheritsPopupMenu(true);
        yearMovieFieldEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearMovieFieldEditorActionPerformed(evt);
            }
        });
        yearMovieFieldEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yearMovieFieldEditorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yearMovieFieldEditorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearMovieFieldEditorKeyTyped(evt);
            }
        });

        movieResultTable.setAutoCreateRowSorter(true);
        movieResultTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        movieResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Τίτλος Ταινίας", "Βαθμολογία", "Περιγραφή"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        //Επιλογή στήλης Βαθμολογία για ταξινόμηση
        DefaultTableModel model =  (DefaultTableModel) movieResultTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        sorter.setSortable(0, false);
        sorter.setSortable(2, false);
        movieResultTable.setRowSorter(sorter);
        movieResultTable.setToolTipText("Μπορείτε να ταξινομήσετε ανα Βαθμολογία");
        movieResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        movieResultTable.setAutoscrolls(false);
        movieResultTable.setColumnSelectionAllowed(true);
        movieResultTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        movieResultTable.setNextFocusableComponent(favoriteListComboBox);
        movieResultTable.getTableHeader().setReorderingAllowed(false);
        movieResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieResultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(movieResultTable);
        movieResultTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, favoriteListList, favoriteListComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        favoriteListComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                favoriteListComboBoxItemStateChanged(evt);
            }
        });
        favoriteListComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                favoriteListComboBoxMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                favoriteListComboBoxMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                favoriteListComboBoxMouseReleased(evt);
            }
        });
        favoriteListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favoriteListComboBoxActionPerformed(evt);
            }
        });

        addToListLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addToListLabel.setText("Επιλογή Λίστας Αγαπημένων");

        removeFromListButton.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        removeFromListButton.setText("Αφαίρεση από Λίστα");
        removeFromListButton.setToolTipText("Πατήστε για αφαίρεση από Λίστα");
        removeFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromListButtonActionPerformed(evt);
            }
        });

        headerJPanel.setBackground(new java.awt.Color(204, 255, 255));
        headerJPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        headerJLaber.setBackground(new java.awt.Color(44, 196, 158));
        headerJLaber.setDisplayedMnemonic('\u03c3');
        headerJLaber.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        headerJLaber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerJLaber.setText("<html><strong>My Movies</strong></html>");
        headerJLaber.setToolTipText("Αρχικό Μενού");
        headerJLaber.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout headerJPanelLayout = new javax.swing.GroupLayout(headerJPanel);
        headerJPanel.setLayout(headerJPanelLayout);
        headerJPanelLayout.setHorizontalGroup(
            headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerJPanelLayout.createSequentialGroup()
                .addGap(422, 422, 422)
                .addComponent(headerJLaber)
                .addGap(401, 401, 401))
        );
        headerJPanelLayout.setVerticalGroup(
            headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerJLaber, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchTableLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        searchTableLabel.setText("Πίνακας Αποτελεσμάτων Αναζήτησης");

        homeButton.setBackground(new java.awt.Color(204, 255, 255));
        homeButton.setText("<html><span style=\"font-size:15px;\">Επιστροφή στο Κεντρικό Μενού</span></html>");
        homeButton.setToolTipText("Συντόμευση πλήκτρου: Esc");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Πληροφορίες", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18), new java.awt.Color(0, 102, 255))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("<html> <p> Με τη λειτουργία <strong style=\"color:blue\">Αναζήτηση Ταινιών</strong> παρέχεται η δυνατότητα αναζήτησης ταινιών της εφαρμογής. Συγκεκριμένα για την αναζήτηση παρέχονται οι παρακάτω επιλογές: </p> <ol> <li>Με την <strong style=\"color:blue\">Επιλογή Είδους Ταινίας</strong> , <strong style=\"color:blue\">Ετος Κυκλοφορίας</strong> και την επιλογή του πλήκτρου <strong style=\"color:blue\">Αναζήτηση</strong> εμφανίζονται οι ταινίες της εφαρμογής που τειρούν τα κριτήρια.</li> <li>Με την επιλογή μίας ταινίας, εμφανίζεται η Αγαπημένη Λίστα ( εφόσον ανήκει σε κάποια) και επιλέγοντας μία Αγαπημένη Λίστα στο πεδίο <strong style=\"color:blue\">Προσθήκη σε Λίστα</strong> , προστίθεται στην Λίστα αυτή.</li> </ol> </html>");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        selectedMovieInfo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        selectedMovieInfo.setText("Πληροφορίες επιλεγμένης ταινίας");

        buttonAddToFavList.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        buttonAddToFavList.setText("Προσθήκη στη Λίστα");
        buttonAddToFavList.setToolTipText("Πατήστε για να προσθέσετε την ταινία στην επιλεγμένη λίστα αγαπημένων");
        buttonAddToFavList.setActionCommand("buttonAddToFavList");
        buttonAddToFavList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToFavListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(headerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(searchTableLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addGap(358, 358, 358))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieSearchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(movieTypeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(movieTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yearMovieFieldEditor)
                    .addComponent(resetChoicesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yearMovieLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(173, 173, 173)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(favoriteListComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addToListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeFromListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddToFavList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(407, 407, 407)
                .addComponent(homeButton)
                .addGap(309, 309, 309))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedMovieInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(headerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(searchTableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedMovieInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(movieTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearMovieLabel))
                    .addComponent(addToListLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(favoriteListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearMovieFieldEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonAddToFavList))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(movieTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(movieSearchButton)
                        .addComponent(resetChoicesButton))
                    .addComponent(removeFromListButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        movieTypeComboBox.getAccessibleContext().setAccessibleDescription("Πρέπει να επιλέξετε είδος ταινίας");

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*  
        Ανάκτηση ταινιών από Βάση Δέδομένων βάσει κριτιρίων αναζήτησης 
        κατοπίν πατήματος του Κουμπιού "Αναζήτηση"
    */
    private void movieSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieSearchButtonActionPerformed
        // TODO add your handling code here:       
        
        
        //Ανάκτηση της επιλογής του τύπου της ταινίας
        String searchType = (String)movieTypeComboBox.getSelectedItem();
        ////Ανάκτηση του έτους κυκλοφορίας της ταινίας
        String searchYear = yearMovieFieldEditor.getText().trim();
        
            
        //Ανάκτηση ταινιών από την Βάση Δεμομένων βάσει κριτιρίων αναζήτησης
        retrieveMovieList = MovieSearchManipulation.retrieveFromDBMovieTable(searchType,searchYear,rootPane);
        
        if(retrieveMovieList.isEmpty()){
            selectedMovieInfo.setForeground(Color.red);
            selectedMovieInfo.setText("Δεν βρέθηκε ταινία με αυτά τα κριτήρια αναζήτησης.");            
        }else {
            selectedMovieInfo.setForeground(Color.BLACK);
            selectedMovieInfo.setText("Στον πίνακα παρουσιάζονται οι ταινίες που τηρούν τα κριτήρια αναζήτησης");
                    
        }
        //Προσθήκη των αποτελεσμάτων αναζήτησης στον πίνακα movieResultTable 
        addRowtoJTable(retrieveMovieList);
    }//GEN-LAST:event_movieSearchButtonActionPerformed
   
    private void movieTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieTypeComboBoxActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_movieTypeComboBoxActionPerformed

    private void yearMovieFieldEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearMovieFieldEditorActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_yearMovieFieldEditorActionPerformed

    /*
        Καθαρισμός των επιλογών κριτιρών αναζήτησης πατώντας  
        το κουμπί "Καθαρισμός Επιλογών"
    */
    private void resetChoicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetChoicesButtonActionPerformed
        // TODO add your handling code here:
        //Σβήσιμο του πεδίου της κυκλοφορίας του έτους
        yearMovieFieldEditor.setText(null);
        //Αρχικοποίηση του πεδίου του είδους της ταινίας στην τιμή <Κανένα>
        movieTypeComboBox.setSelectedIndex(0);
        //Απενεργοποίηση του κουμπιού "Αναζήτηση"
        movieSearchButton.setEnabled(false); 
    }//GEN-LAST:event_resetChoicesButtonActionPerformed

    private void movieTypeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieTypeComboBoxMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_movieTypeComboBoxMouseClicked

    private void movieSearchButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_movieSearchButtonFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_movieSearchButtonFocusLost

    /*
        Ελεχος από το πεδίο είδους ταινίας για ύπαρξη τιμής  
        στα πεδία του είδους ταινίας και έτος κυκλοφορίας για  
        ενεργοποίηση/απενεργοποίηση του κουμπιού "Αναζήτηση"
    */
    private void movieTypeComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_movieTypeComboBoxKeyReleased
        // TODO add your handling code here:
        /*
            Αν το πεδίο του τύπου ταινίας και το πεδίο του έτους κυκλοφορίας
            δεν είναι άδεια και τα δύο, το κουμπί "Αναζήτηση" ενεργοποιείται
            διαφορετικά απενεργοποιειται
        */
        if(!movieTypeComboBox.getSelectedItem().equals("<Κανένα>")
                && !(yearMovieFieldEditor.getText().equals(null)))
            movieSearchButton.setEnabled(true);
        else
           movieSearchButton.setEnabled(false); 
        
    }//GEN-LAST:event_movieTypeComboBoxKeyReleased

    private void yearMovieFieldEditorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearMovieFieldEditorKeyTyped
        // TODO add your handling code here:       
    }//GEN-LAST:event_yearMovieFieldEditorKeyTyped

    private void yearMovieFieldEditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearMovieFieldEditorKeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_yearMovieFieldEditorKeyReleased

    private void movieTypeComboBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_movieTypeComboBoxKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_movieTypeComboBoxKeyTyped

    private void favoriteListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoriteListComboBoxActionPerformed
        // TODO add your handling code here:            
    }//GEN-LAST:event_favoriteListComboBoxActionPerformed

    /*
        Χειρισμός των αποτελεσμάτων του πίνακα αναζήτησης ταινιών με 
        επιλογή μιας εγγραφής ταινίας
    */
    private void movieResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieResultTableMouseClicked
        // TODO add your handling code here:
        //Ανάκτηση της επιλεγμένης ταινίας από το μοντέλο του πίνακα 
        Movie movieSelected = retrieveMovieList.get(movieResultTable.convertRowIndexToModel(movieResultTable.getSelectedRow()));
        
        /*
            Ελεγχος της ταινίας αν ανήκει ήδη σε Αγαπημένη λίστα. Αν ανήκει,
            προβάλλεται η λίστα που ανήκει ήδη
            
        */
        try {
            if(!movieSelected.getFavoriteListId().equals(null)){
                selectedMovieInfo.setForeground(Color.BLACK);
                selectedMovieInfo.setText("Η ταινία "+"\""+movieSelected.getTitle()+"\""
                        + " ανήκει ήδη στην Αγαπημένη Λίστα "
                        +"\""+movieSelected.getFavoriteListId().getName()+"\"");
                favoriteListComboBox.setSelectedItem(movieSelected.getFavoriteListId().getName());
            }    
        }catch (NullPointerException e){
            selectedMovieInfo.setForeground(Color.red);
            selectedMovieInfo.setText("Η ταινία "+"\""+movieSelected.getTitle()+"\""
                    + " δεν ανήκει σε καμία Αγαπημένη Λίστα."
                    + "\n Επιλέξτε μία Αγαπημένη Λίστα για προθήκη της ταινίας");
        }        
        
    }//GEN-LAST:event_movieResultTableMouseClicked

    
    private void favoriteListComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favoriteListComboBoxMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_favoriteListComboBoxMouseClicked

    private void favoriteListComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_favoriteListComboBoxItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_favoriteListComboBoxItemStateChanged

    private void favoriteListComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favoriteListComboBoxMousePressed
        // TODO add your handling code here:        
    }//GEN-LAST:event_favoriteListComboBoxMousePressed

    private void favoriteListComboBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favoriteListComboBoxMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_favoriteListComboBoxMouseReleased

    /*
        Αφαίρεση της επιλεγμένης ταινίας από την Αγαπημένη λίστα με το 
        πάτημα του κουμπιού "Διαγραφή από Αγαπημένη Λίστα".Αν η ταινία
        δεν ανήκει σε λίστα,εμφανίζεται αντίστοιχο μήνυμα 
    */
    private void removeFromListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromListButtonActionPerformed
        // TODO add your handling code here:
        try {
            Movie movieSelectedForDelete = retrieveMovieList.get(movieResultTable.convertRowIndexToModel(movieResultTable.getSelectedRow()));
            try {
                //Ελεγχος αν η ταινία ανήκει σε Αγαπημένη λίστα
                movieSelectedForDelete.getFavoriteListId().equals(null); 
                // Αν ανήκει αφαίρεσή της από την λίστα
                String message = movieSelectedForDelete.getFavoriteListId().getName();
                movieSelectedForDelete.setFavoriteListId(null);
                //Η επιλογή των Αγαπημένων Λιστών αρχικοποιείται
                favoriteListComboBox.setSelectedIndex(0);
            
                /*
                    Ενημέρωση της Βάσης δεδομένων με την αλλαγή στην αγαπημένη λίστα
                    της επιλεγμένης ταινίας
                */
                MovieSearchManipulation.updateMovieTabLe (movieSelectedForDelete);
                selectedMovieInfo.setForeground(Color.BLACK);
                selectedMovieInfo.setText("Η ταινία "+"\""+movieSelectedForDelete.getTitle()+"\""
                     + " διαγράφηκε από την Αγαπημένη Λίστα " +"\""+ message+"\"");          
            }catch (NullPointerException e){
                //Μήνυμα εφόσον η ταινία δεν ανήκει σε λίστα
                selectedMovieInfo.setForeground(Color.red);
                selectedMovieInfo.setText("Η ταινία "+"\""+movieSelectedForDelete.getTitle()+"\""
                        + " δεν ανήκει σε καμία Αγαπημένη Λίστα.");
            }         
        }catch(IndexOutOfBoundsException indexc){
            favoriteListComboBox.setEnabled(false);
            selectedMovieInfo.setForeground(Color.MAGENTA);
            selectedMovieInfo.setText("Παρακαλώ επιλέξτε μία ταινία από τον πίνακα");
            favoriteListComboBox.setEnabled(true);
        }                
       
    }//GEN-LAST:event_removeFromListButtonActionPerformed

    /*
        Ελεχος από το πεδίο ;έτος κυκλοφορίας ταινίας για ύπαρξη τιμής  
        στα πεδία του είδους ταινίας και έτος κυκλοφορίας για  
        ενεργοποίηση/απενεργοποίηση του κουμπιού "Αναζήτηση"
    */
    private void yearMovieFieldEditorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearMovieFieldEditorKeyPressed
        // TODO add your handling code here:
        /*
            Αν το πεδίο του τύπου ταινίας και το πεδίο του έτους κυκλοφορίας
            δεν είναι άδεια και τα δύο, το κουμπί "Αναζήτηση" ενεργοποιείται
            διαφορετικά απενεργοποιειται
        */
        if(!movieTypeComboBox.getSelectedItem().equals("<Κανένα>" ) 
                && !(yearMovieFieldEditor.getText().equals(null)))
            movieSearchButton.setEnabled(true);
        else
           movieSearchButton.setEnabled(false); 
        
         
    }//GEN-LAST:event_yearMovieFieldEditorKeyPressed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        // TODO add your handling code here:
        //Επιστροφή στο αρχικό μενού, θέτοντας το ξανά ενεργό και κλείνοντας την παρούσα φόρμα
        parent.setEnabled(true);
        parent.setVisible(true);
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        //Επιστροφή στο αρχικό μενού, θέτοντας το ξανά ενεργό και κλείνοντας την παρούσα φόρμα
        int dialogResult = JOptionPane.showConfirmDialog (null, "Θέλετε να κλείσετε τη λειτουργία  'Aναζήτηση Ταινιών ;","ΠΡΟΣΟΧΗ !!!",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }else {
            parent.setEnabled(true);
            parent.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void movieTypeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_movieTypeComboBoxKeyPressed
        // TODO add your handling code here:
                
    }//GEN-LAST:event_movieTypeComboBoxKeyPressed
    
    /*
        Επιλογή της Αγαπημένης Λίστας και προσθήκη της επιλεγμένης
        ταινίας σε αυτή
    */
    private void buttonAddToFavListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddToFavListActionPerformed
        // TODO add your handling code here:
        
        //Ανάκτηση της ταινίας από το μοντέλο του πίνακα αναζήτησης                     
        //Movie movieSelectedForUpdate = new Movie();
        try {
            
            Movie movieSelectedForUpdate = retrieveMovieList.get(movieResultTable.convertRowIndexToModel(movieResultTable.getSelectedRow()));                   
            movieSelectedForUpdate.setFavoriteListId(MovieSearchManipulation
                    .retrieveFavoriteListFromDB(favoriteListComboBox.getSelectedIndex(),rootPane));           
            /*
                Ενημέρωση της Βάσης δεδομένων με την αλλαγή στην αγαπημένη λίστα
                της επιλεγμένης ταινίας
             */           
            
            MovieSearchManipulation.updateMovieTabLe (movieSelectedForUpdate);
            selectedMovieInfo.setForeground(Color.decode("#228B22"));
            selectedMovieInfo.setText("Η ταινία "+"\""+movieSelectedForUpdate.getTitle()+"\""
                    + " προστέθηκε στην Αγαπημένη Λίστα "
                   +" \"" + movieSelectedForUpdate.getFavoriteListId().getName() + "\"");
            
        }catch(ArrayIndexOutOfBoundsException arexc){
            favoriteListComboBox.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "Δεν υπάρχουν ακόμα Αγαπημένες Λίστες."
                    + "\nΠαρακαλώ δημιουργήστε πρώτα τις Αγαπημένες σας Λίστες","Μήνυμα",JOptionPane.ERROR_MESSAGE);
            favoriteListComboBox.setEnabled(true);
        }catch(IndexOutOfBoundsException indexc){
            favoriteListComboBox.setEnabled(false);
            selectedMovieInfo.setForeground(Color.MAGENTA);
            selectedMovieInfo.setText("Παρακαλώ επιλέξτε μία ταινία από τον πίνακα");
            favoriteListComboBox.setEnabled(true);
        }         
    }//GEN-LAST:event_buttonAddToFavListActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addToListLabel;
    private javax.swing.JButton buttonAddToFavList;
    private javax.persistence.EntityManager em;
    private javax.swing.JComboBox<String> favoriteListComboBox;
    private java.util.List<model.FavoriteList> favoriteListList;
    private javax.persistence.Query favoriteListQuery;
    private javax.swing.JLabel headerJLaber;
    private javax.swing.JPanel headerJPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable movieResultTable;
    private javax.swing.JButton movieSearchButton;
    private javax.swing.JComboBox<String> movieTypeComboBox;
    private javax.swing.JLabel movieTypeLabel;
    private javax.swing.JButton removeFromListButton;
    private javax.swing.JButton resetChoicesButton;
    private javax.swing.JLabel searchTableLabel;
    private javax.swing.JLabel selectedMovieInfo;
    private javax.swing.JTextField yearMovieFieldEditor;
    private javax.swing.JLabel yearMovieLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private List <Movie> retrieveMovieList;
    private MainMenu parent;
   
    /*
        Μέθοδος ενημέρωσης πίνακα ταινιών αναζήτησης από 
        την λίστα αποτελεσμάτων αναζήτησης
    */
    private void addRowtoJTable (List<Movie> list){
        
        //Ανάκτηση μοντέλου πίνακα αποτελεσμάτων αναζήτησης 
        DefaultTableModel model =  (DefaultTableModel) movieResultTable.getModel();
        /*
            Δημιουργία του πίνακα με τα πεδία 'Τίτλος', 'Βαθμολογία' 
            και 'Περιγραφή' από την λίστα αποτελεσμάτων αναζήτησης
        */
        Object rowData[]; 
        rowData = new Object[3];
        model.setRowCount(0);
        for(int i=0; i<list.size(); i++){
            rowData[0] = list.get(i).getTitle();
            rowData[1] = list.get(i).getRating();
            rowData[2] = list.get(i).getOverview();
            model.addRow(rowData);
        }
        
        // Format Tables
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        movieResultTable.getTableHeader().setDefaultRenderer(centerRenderer);
        movieResultTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
    }    
    
    
       
       
}
